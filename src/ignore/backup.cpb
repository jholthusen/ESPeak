#include <Arduino.h>
#ifdef ESP32
    #include <WiFi.h>
    #include "SPIFFS.h"
#else
    #include <ESP8266WiFi.h>
#endif


//#include "AudioFileSourcePROGMEM.h"
#include "AudioFileSourceSPIFFS.h"
#include "AudioGeneratorWAV.h"
#include "AudioOutputI2S.h"
#include <PubSubClient.h>
#include <Ethernet.h>

// VIOLA sample taken from https://ccrma.stanford.edu/~jos/pasp/Sound_Examples.html
#include <SPI.h>

//#include <Ethernet.h>

//#include "essen_wav.h"

// Update these with values suitable for your network.
//char ssid[] = "FB-Keller";        // your network SSID (name)
//char password[] = "95016701492597564367"; 
AudioGeneratorWAV *wav;
//AudioFileSourcePROGMEM *file;
AudioFileSourceSPIFFS *file;
AudioOutputI2S *out;

const char* ssid     = "FB-Keller";
const char* password = "95016701492597564367";


IPAddress server(192, 168, 6, 60);
int port   = 1884;

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i=0;i<length;i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

WiFiClient wificlient;
PubSubClient client(wificlient);

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    
    if (WiFi.status() != WL_CONNECTED) {
      WiFi.begin(ssid, password);
      delay(500);
      Serial.print(".");
    }
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("arduinoClient")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("ESPeak/outTopic","hello world");
      // ... and resubscribe
      client.subscribe("ESPeak/inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup()
{
  Serial.begin(115200);
  /*
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    */
  SPIFFS.begin();

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
/*
  client.setServer(server, 1884);
  Serial.println("MQTT set");
  client.setCallback(callback);
  Serial.println("Callback set");
*/

  
  Serial.println("Audio File set up");

  // Allow the hardware to sort itself out
  delay(1500);
    Serial.printf("WAV start\n");
  // file = new AudioFileSourcePROGMEM( essen_wav, sizeof(essen_wav) );
  file = new AudioFileSourceSPIFFS("/essen.wav");
  Serial.printf("file set\n");
  out = new AudioOutputI2S();
  Serial.printf("out set\n");
  wav = new AudioGeneratorWAV();
  Serial.printf("WAV play\n");
  wav->begin(file, out);
  delay(1500);
}

void loop()
{
  
  if (wav->isRunning()) {
    if (!wav->loop()) wav->stop();
  } else {
    Serial.printf("WAV done\n");
    delay(1000);
  }
  /*
  if (!client.connected()) {
    reconnect();
  }

  client.loop();
  */

}

 